lrn <- wws[ind,]
tst <- wws[-ind,]
lixo <- paste(colnames(lrn), collapse="+")
lixo
library(neuralnet)
set.seed(911)
rn <- neuralnet(data=lrn,hidden=(3,4,5),cancelsim~idade+linhas+temp_cli+renda+fatura+temp_rsd+localB+localC+localD+tvcabosim+debautsim,
lifesign = "minimal",linear.output = FALSE, rep=1)
rn <- neuralnet(data=lrn,hidden=(2),cancelsim~idade+linhas+temp_cli+renda+fatura+temp_rsd+localB+localC+localD+tvcabosim+debautsim,
lifesign = "minimal",linear.output = FALSE, rep=1)
View(tst)
set.seed(NULL)
TEBA <- TEBA
View(TEBA)
zz<-TEBA[,-c(1,12:15)]
View(zz)
zz$alvo <- ifelse(zz$cancel=="nao",1,0)
View(zz)
col_list<- paste(colnames(zz),collapse = "+")
col_list
#vamos rodar a reg log
fit=glm(data=lrn,alvo~idade+linhas+temp_cli+renda+fatura+temp_rsd+local+tvcabo+debaut, family = binomial())
summary(fit)
print(fit,digits=3)
#vamos selecionar as variaveis
fit2=step(fit)
fit2
tst$pnao <- predict(fit2,newdata=tst,type="response")
tst$pnao
PC= 0.5
tst$klass= ifelse(tst$pnao>PC,"no","yes")
table(tst$cancel,tst$klass)
PC= 0.5
tst$klass= ifelse(tst$pnao>PC,"no","yes")
table(tst$cancel,tst$klass)
PC= 0.5
tst$klass= ifelse(tst$pnao>PC,"no","yes")
tst$pnao <- predict(fit2,newdata=tst,type="response")
TEBA <- TEBA
zz<-TEBA[,-c(1,12:15)]
zz$alvo <- ifelse(zz$cancel=="nao",1,0)
#flag = sample(1:2000,1200)? usa?
flag = sample(1:2000,1200)
lrn<-zz[flag,]
tst<-zz[-flag,]
#vamos rodar a reg log
fit=glm(data=lrn,alvo~idade+linhas+temp_cli+renda+fatura+temp_rsd+local+tvcabo+debaut, family = binomial())
#vamos selecionar as variaveis
fit2=step(fit)
tst$pnao <- predict(fit2,newdata=tst,type="response")
PC= 0.5
tst$klass= ifelse(tst$pnao>PC,"no","yes")
table(tst$cancel,tst$klass)
Kprob<- discretize(tst$pnao,method="frequency", breaks = 8)
CrossTable(Kprob,tst$cancel,prop.c = FALSE,prop.t = FALSE,prop.chisq = FALSE)
HMeasure(tst$cancel,tst$pnao)$metrics
ww<-TEBA[,-c(1,12:15)]
View(ww)
wwd <- model.matrix(data=ww,~.)
View(wwd)
colnames(wwd)
TEBA <- TEBA
zz<-TEBA[,-c(1,12:15)]
View(zz)
ww<-TEBA[,-c(1,12:15)]
View(ww)
#agora vamos gerar as variaveis dummies
wwd <- model.matrix(data=ww,~.)
View(wwd)
colnames(wwd)
#descartar primeira coluna
wwd<- wwd[,-1]
wwd <- as.data.frame(wwd)
boxplot(mm$idade)
boxplot(wd$idade)
boxplot(wwd$idade)
mm<- wwd
boxplot(wwd$linhas)
mm$klinhas=ifelse(mm$linhas>3,3,mm$linhas)
boxplot(wwd$lin
boxplot(wwd$lin
boxplot(mm$linhas)
boxplot(mm$linhas)
boxplot(mm$linhas)
mm$klinhas=ifelse(mm$linhas>3,3,mm$linhas)
boxplot(mm$linhas)
mm$klinhas=ifelse(mm$linhas>3,3,mm$linhas)
boxplot(mm$klinhas)
mm$klinhas=ifelse(mm$linhas>3,3,mm$linhas)
table(mm$linhas)
table(mm$klinhas)
boxplot(mm$temp_cli)
boxplot(log(mm$temp_cli))
boxplot(mm$temp_cli)
boxplot(log(mm$temp_cli))
mm$Ltempcli=log(mm$temp_cli)
boxplot(mm$temp_cli)
pp=PUNTO
View(PUNTO)
# vamos analisar as vars
pp$RESID=as.factor(pp$RESID)
pp$SEXO=as.factor(pp$SEXO)
m=table(pp$RESID,pp$STATUS)
mp=prop.table(m,1)
m;mp
m=table(pp$SEXO,pp$STATUS)
mp=prop.table(m,1)
m;mp
library(arules)
m=table(pp$renda,pp$STATUS)
m=table(pp$RENDA,pp$STATUS)
mp=prop.table(m,1)
m;mp
pp$krenda=discretize(pp$RENDA, method = "frequency", categories = 5)
m=table(pp$krenda,pp$STATUS)
mp=prop.table(m,1)
m;mp
plot(pp$krenda)
library(readxl)
abbbbbbbb <- read_excel("abbbbbbbb.xlsx",
col_types = c("date", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text"))
View(abbbbbbbb)
library(readxl)
abbbbbbbb <- read_excel("abbbbbbbb.xlsx")
View(abbbbbbbb)
# Limpando o console.
cat("\014")
# Limpando o Global Environment.
rm(list = ls())
# Instalando e ativando o pacote quantmod, para modelagem financeira.
install.packages("quantmod")
library("quantmod")
# Dando os nomes das empresas do portifólio que será analisado.
papeis <- c('ABEV3.SA', 'AZUL4.SA', 'B3SA3.SA', 'BBAS3.SA', 'BBDC3.SA', 'BBSE3.SA', 'BRAP4.SA', 'BRDT3.SA', 'BRFS3.SA',
'BRKM5.SA', 'BRML3.SA', 'BTOW3.SA', 'CCRO3.SA', 'CIEL3.SA', 'CMIG4.SA', 'CSAN3.SA', 'CSNA3.SA', 'CVCB3.SA',
'CYRE3.SA', 'ECOR3.SA', 'EGIE3.SA', 'ELET3.SA', 'ELET6.SA', 'EMBR3.SA', 'ENBR3.SA', 'EQTL3.SA', 'ESTC3.SA',
'FLRY3.SA', 'GGBR4.SA', 'GOAU4.SA', 'GOLL4.SA', 'HYPE3.SA', 'IGTA3.SA', 'IRBR3.SA', 'ITSA4.SA', 'ITUB4.SA',
'JBSS3.SA', 'KROT3.SA', 'LAME4.SA', 'LREN3.SA', 'MGLU3.SA', 'MRFG3.SA', 'MRVE3.SA', 'MULT3.SA', 'NATU3.SA',
'PCAR4.SA', 'PETR3.SA', 'PETR4.SA', 'QUAL3.SA', 'RADL3.SA', 'RENT3.SA', 'SBSP3.SA', 'SMLS3.SA', 'SUZB3.SA',
'TIMP3.SA', 'UGPA3.SA', 'USIM5.SA', 'VALE3.SA', 'VIVT4.SA', 'VVAR3.SA', 'WEGE3.SA')
# Dando os nomes das empresas do portifólio que será analisado.
papeis <- c('ABEV3.SA', 'AZUL4.SA', 'B3SA3.SA', 'BBAS3.SA', 'BBDC3.SA', 'BBSE3.SA', 'BRAP4.SA', 'BRDT3.SA', 'BRFS3.SA',
'BRKM5.SA', 'BRML3.SA', 'BTOW3.SA', 'CCRO3.SA', 'CIEL3.SA', 'CMIG4.SA', 'CSAN3.SA', 'CSNA3.SA', 'CVCB3.SA',
'CYRE3.SA', 'ECOR3.SA', 'EGIE3.SA', 'ELET3.SA', 'ELET6.SA', 'EMBR3.SA', 'ENBR3.SA', 'EQTL3.SA', 'ESTC3.SA',
'FLRY3.SA', 'GGBR4.SA', 'GOAU4.SA', 'GOLL4.SA', 'HYPE3.SA', 'IGTA3.SA', 'IRBR3.SA', 'ITSA4.SA', 'ITUB4.SA',
'JBSS3.SA', 'KROT3.SA', 'LAME4.SA', 'LREN3.SA', 'MGLU3.SA', 'MRFG3.SA', 'MRVE3.SA', 'MULT3.SA', 'NATU3.SA',
'PCAR4.SA', 'PETR3.SA', 'PETR4.SA', 'QUAL3.SA', 'RADL3.SA', 'RENT3.SA', 'SBSP3.SA', 'SMLS3.SA', 'SUZB3.SA',
'TIMP3.SA', 'UGPA3.SA', 'USIM5.SA', 'VALE3.SA', 'VIVT4.SA', 'VVAR3.SA', 'WEGE3.SA')
papeis1 <- abbbbbbbb
head(papeis)
library(readxl)
abbbbbbbb <- read_excel("abbbbbbbb.xlsx")
View(abbbbbbbb)
papeis1 <- abbbbbbbb
papeis <- abbbbbbbb
head(papeis)
for (papel in papeis) {
# help(Cl) # A função Cl serve para extrair e transformar colunas de series
# temporais de objetos OHLC (Open-High-Low-Close), que é como as informações
# financeiras são geralmente disponibilizadas.
# cl é a função do pacote quantmod para ficar só com o valor de fechamento
# (close).
# help(eval) # A função eval resolve o seu argumento principal dentro de um
# ambiente.
#--------------------------------------------------------------------------
#---------------------------- Exemplos de eval ----------------------------
#eval(2 ^ 2 ^ 3)
#mEx <- expression(2^2^3); mEx; 1 + eval(mEx)
#eval({ xx <- pi; xx^2}) ; xx
#--------------------------------------------------------------------------
# help(parse) # A função parse pede para analisar uma palavra (parse=analisar).
tmp <- Cl(to.daily(eval(parse(text = papel))))
P <- cbind(P, tmp)
}
library(readxl)
abbbbbbbb <- read_excel("abbbbbbbb.xlsx")
View(abbbbbbbb)
papeis <- abbbbbbbb
head(papeis)
papeis <- DataFrame(abbbbbbbb)
papeis <- as.dataframe(abbbbbbbb)
papeis <- data.frame(abbbbbbbb)
head(papeis)
# Agregando-se as informações de cada empresa na tabela P pelos fechamentos de cada
# período (mês, no caso).
P <- NULL
for (papel in papeis) {
# help(Cl) # A função Cl serve para extrair e transformar colunas de series
# temporais de objetos OHLC (Open-High-Low-Close), que é como as informações
# financeiras são geralmente disponibilizadas.
# cl é a função do pacote quantmod para ficar só com o valor de fechamento
# (close).
# help(eval) # A função eval resolve o seu argumento principal dentro de um
# ambiente.
#--------------------------------------------------------------------------
#---------------------------- Exemplos de eval ----------------------------
#eval(2 ^ 2 ^ 3)
#mEx <- expression(2^2^3); mEx; 1 + eval(mEx)
#eval({ xx <- pi; xx^2}) ; xx
#--------------------------------------------------------------------------
# help(parse) # A função parse pede para analisar uma palavra (parse=analisar).
tmp <- Cl(to.daily(eval(parse(text = papel))))
P <- cbind(P, tmp)
}
head(papeis)
# Agregando-se as informações de cada empresa na tabela P pelos fechamentos de cada
# período (mês, no caso).
P <- NULL
for (papel in papeis) {
# help(Cl) # A função Cl serve para extrair e transformar colunas de series
# temporais de objetos OHLC (Open-High-Low-Close), que é como as informações
# financeiras são geralmente disponibilizadas.
# cl é a função do pacote quantmod para ficar só com o valor de fechamento
# (close).
# help(eval) # A função eval resolve o seu argumento principal dentro de um
# ambiente.
#--------------------------------------------------------------------------
#---------------------------- Exemplos de eval ----------------------------
#eval(2 ^ 2 ^ 3)
#mEx <- expression(2^2^3); mEx; 1 + eval(mEx)
#eval({ xx <- pi; xx^2}) ; xx
#--------------------------------------------------------------------------
# help(parse) # A função parse pede para analisar uma palavra (parse=analisar).
tmp <- Cl(to.daily(eval(parse(text = papel))))
P <- cbind(P, tmp)
}
rm(list=ls())
install.packages("quantmod")
install.packages("ggplot2")
library(quantmod)
library(ggplot2)
install.packages("quantmod")
install.packages("quantmod")
pbr <- getSymbols("PBR", src = "yahoo", from = "2013-01-01", to = "2017-06-01", auto.assign = FALSE)
pbr <- getSymbols("PBR", src = "yahoo", from = "2013-01-01", to = "2017-06-01")
head(pbr)
papeis <- c('ABEV3.SA', 'AZUL4.SA', 'B3SA3.SA', 'BBAS3.SA', 'BBDC3.SA', 'BBSE3.SA', 'BRAP4.SA', 'BRDT3.SA', 'BRFS3.SA',
'BRKM5.SA', 'BRML3.SA', 'BTOW3.SA', 'CCRO3.SA', 'CIEL3.SA', 'CMIG4.SA', 'CSAN3.SA', 'CSNA3.SA', 'CVCB3.SA',
'CYRE3.SA', 'ECOR3.SA', 'EGIE3.SA', 'ELET3.SA', 'ELET6.SA', 'EMBR3.SA', 'ENBR3.SA', 'EQTL3.SA', 'ESTC3.SA',
'FLRY3.SA', 'GGBR4.SA', 'GOAU4.SA', 'GOLL4.SA', 'HYPE3.SA', 'IGTA3.SA', 'IRBR3.SA', 'ITSA4.SA', 'ITUB4.SA',
'JBSS3.SA', 'KROT3.SA', 'LAME4.SA', 'LREN3.SA', 'MGLU3.SA', 'MRFG3.SA', 'MRVE3.SA', 'MULT3.SA', 'NATU3.SA',
'PCAR4.SA', 'PETR3.SA', 'PETR4.SA', 'QUAL3.SA', 'RADL3.SA', 'RENT3.SA', 'SBSP3.SA', 'SMLS3.SA', 'SUZB3.SA',
'TIMP3.SA', 'UGPA3.SA', 'USIM5.SA', 'VALE3.SA', 'VIVT4.SA', 'VVAR3.SA', 'WEGE3.SA')
pbr <- getSymbols(papeis, src = "yahoo", from = "2013-01-01", to = "2017-06-01")
head(pbr)
for(papel in papeis) {
# help(Cl) # A função Cl serve para extrair e transformar colunas de series
# temporais de objetos OHLC (Open-High-Low-Close), que é como as informações
# financeiras são geralmente disponibilizadas.
# cl é a função do pacote quantmod para ficar só com o valor de fechamento
# (close).
# help(eval) # A função eval resolve o seu argumento principal dentro de um
# ambiente.
#--------------------------------------------------------------------------
#---------------------------- Exemplos de eval ----------------------------
#eval(2 ^ 2 ^ 3)
#mEx <- expression(2^2^3); mEx; 1 + eval(mEx)
#eval({ xx <- pi; xx^2}) ; xx
#--------------------------------------------------------------------------
# help(parse) # A função parse pede para analisar uma palavra (parse=analisar).
tmp <- Cl(to.monthly(eval(parse(text = papel))))
P <- cbind(P, tmp)
}
P <- NULL
for(papel in papeis) {
# help(Cl) # A função Cl serve para extrair e transformar colunas de series
# temporais de objetos OHLC (Open-High-Low-Close), que é como as informações
# financeiras são geralmente disponibilizadas.
# cl é a função do pacote quantmod para ficar só com o valor de fechamento
# (close).
# help(eval) # A função eval resolve o seu argumento principal dentro de um
# ambiente.
#--------------------------------------------------------------------------
#---------------------------- Exemplos de eval ----------------------------
#eval(2 ^ 2 ^ 3)
#mEx <- expression(2^2^3); mEx; 1 + eval(mEx)
#eval({ xx <- pi; xx^2}) ; xx
#--------------------------------------------------------------------------
# help(parse) # A função parse pede para analisar uma palavra (parse=analisar).
tmp <- Cl(to.monthly(eval(parse(text = papel))))
P <- cbind(P, tmp)
}
head(P)
colnames(P) <- papeis
papeis <- c('ABEV3.SA', 'AZUL4.SA', 'B3SA3.SA', 'BBAS3.SA', 'BBDC3.SA', 'BBSE3.SA')
pbr <- getSymbols(papeis, src = "yahoo", from = "2013-01-01", to = "2017-06-01")
head(pbr)
P <- NULL
for(papel in papeis) {
# help(Cl) # A função Cl serve para extrair e transformar colunas de series
# temporais de objetos OHLC (Open-High-Low-Close), que é como as informações
# financeiras são geralmente disponibilizadas.
# cl é a função do pacote quantmod para ficar só com o valor de fechamento
# (close).
# help(eval) # A função eval resolve o seu argumento principal dentro de um
# ambiente.
#--------------------------------------------------------------------------
#---------------------------- Exemplos de eval ----------------------------
#eval(2 ^ 2 ^ 3)
#mEx <- expression(2^2^3); mEx; 1 + eval(mEx)
#eval({ xx <- pi; xx^2}) ; xx
#--------------------------------------------------------------------------
# help(parse) # A função parse pede para analisar uma palavra (parse=analisar).
tmp <- Cl(to.monthly(eval(parse(text = papel))))
P <- cbind(P, tmp)
}
head(P)
colnames(P) <- papeis
head(P)
P.class
class(P)
retornos <- (diff(P)/lag(P,k=1)) * 100
retornos <- retornos[-1,]
media_retornos <- colMeans(retornos, na.rm = TRUE)
cov_retornos <- cov(retornos)
require(lattice)
levelplot(cov_retornos)
levelplot(cov_retornos)
cor_retornos <-cor(retornos)
require(lattice)
levelplot(cor_retornos)
# Risco X Retorno de papéis isolados.
desvpad_retornos <- sqrt(diag(cov_retornos))
risco_retorno <- cbind(media_retornos,desvpad_retornos)
risco_retorno_df <- data.frame(risco_retorno)
ativos <- rownames(risco_retorno_df)
risco_retorno.condicao <- data.frame(matrix("Papéis isolados", nrow = nrow(risco_retorno)))
risco_retorno_df <- cbind(risco_retorno.condicao, ativos, risco_retorno_df)
rownames(risco_retorno_df) <- NULL
names(risco_retorno_df)[1]<-paste("condicao")
names(risco_retorno_df)[2]<-paste("carteira")
names(risco_retorno_df)[3]<-paste("retorno_carteira")
names(risco_retorno_df)[4]<-paste("desvpad_carteira")
head(risco_retorno_df)
#sapply(risco_retorno_df, class)
library("ggplot2")
ggplot(data = risco_retorno_df, aes(x = desvpad_carteira, y = retorno_carteira)) +
geom_point(data = risco_retorno_df, colour = "blue") +
geom_text(data = risco_retorno_df,aes(label=carteira),hjust=0, vjust=0, colour = "blue") +
ggtitle("Risco X Retorno dos papéis considerados") +
labs(x = "Risco (Desvio-padrão)", y = "Retorno Esperado")
# Simulando carteiras aleatórias.
simulacoes <- matrix(0,ncol = 3 + ncol(retornos))
dimnames(simulacoes) <- list(NULL, c("cart.simulada",papeis,"retorno_carteira","desvpad_carteira"))
cart.simulada <- 0
for (i in 1:1000) {
cart.simulada <<- cart.simulada + 1
w <- c(runif(ncol(retornos)))
if (sum(w) == 0) { w <- w + 1e-2 }
w <- w / sum(w)
retorno_carteira <- w %*% media_retornos
desvpad_carteira <- sqrt(w %*% cov_retornos %*% w)
w <- matrix(w,nrow = 1)
linhanova <- cbind(cart.simulada, w, retorno_carteira, desvpad_carteira)
simulacoes <<- rbind(simulacoes, linhanova)
}
#head(simulacoes)
simulacoes <- simulacoes[-1,]
head(simulacoes)
simulacoes.carteira <- simulacoes[,1]
simulacoes.metricas <- simulacoes[, (ncol(simulacoes)-1):ncol(simulacoes)]
risco_retorno.sims <-cbind(simulacoes.carteira,simulacoes.metricas)
Simulacoes.condicao <- data.frame(matrix("Carteiras simuladas", nrow = nrow(simulacoes)))
risco_retorno.sims_df <- data.frame(risco_retorno.sims)
risco_retorno.sims_df <- cbind(Simulacoes.condicao, risco_retorno.sims_df)
names(risco_retorno.sims_df)[1]<-paste("condicao")
names(risco_retorno.sims_df)[2]<-paste("carteira")
#head(risco_retorno.sims_df)
#sapply(risco_retorno.sims_df, class)
risco_retorno.sims_df$carteira <- as.factor(risco_retorno.sims_df$carteira)
#sapply(risco_retorno.sims_df, class)
head(risco_retorno.sims_df)
ggplot(data = risco_retorno.sims_df, aes(x = desvpad_carteira, y = retorno_carteira)) +
geom_point(data = risco_retorno.sims_df, colour = "red") +
geom_text(data = risco_retorno.sims_df,aes(label=simulacoes.carteira),hjust=0, vjust=0, colour = "red") +
ggtitle("Risco X Retorno das carteiras simuladas") +
labs(x = "Risco (Desvio-padrão)", y = "Retorno Esperado")
ggplot(data = risco_retorno.sims_df, aes(x = desvpad_carteira, y = retorno_carteira)) +
geom_point(data = risco_retorno.sims_df, colour = "red") +
geom_text(data = risco_retorno.sims_df,aes(label=simulacoes.carteira),hjust=0, vjust=0, colour = "red") +
ggtitle("Risco X Retorno das carteiras simuladas") +
labs(x = "Risco (Desvio-padrão)", y = "Retorno Esperado")
# Observação1: o sinal de <<- é diferente de <-. <- atua somente sobre o ambiente
# em que é definido. Já <<- atua também atualizando ambientes "pais".
# Observação2: O sinal de = é diferente de ==. = é sinal de atribuição, usado dentro
# de algumas funções como argumento. Já == é um operador lógico que verifica a igual-
# dade e retorna TRUE ou FALSE.
# Observação3: Se você quiser ver como funciona a função objetivo, usar
# w <- rep(0.2, ncol(retornos)).
funcao_obj <- function(w) {
fn.call <<- fn.call + 1
if (sum(w) == 0) { w <- w + 1e-2 }
w <- w / sum(w)
retorno_carteira <- w %*% media_retornos
desvpad_carteira <- sqrt(w %*% cov_retornos %*% w)
obj <- desvpad_carteira-retorno_carteira
return(obj)
}
# install.packages("GenSA")
library(GenSA)
install.packages("GenSA")
#install.packages("GenSA")
library(GenSA)
# help(GenSA)
set.seed(1234)
fn.call <<- 0
tempo_inicial <- Sys.time()
resultado_GenSA <- GenSA(fn = funcao_obj, lower = rep(0, ncol(retornos)), upper = rep(1, ncol(retornos)), control = list(smooth = FALSE, max.call = 100000))
tempo_final <- Sys.time()
tempo_execucao <- tempo_final - tempo_inicial
tempo_execucao
papeis <- c('ABEV3.SA', 'AZUL4.SA', 'B3SA3.SA', 'BBAS3.SA', 'BBDC3.SA', 'BBSE3.SA')
pbr <- getSymbols(papeis, src = "yahoo", from = "2013-01-01", to = "2017-06-01")
head(pbr)
head
pbr
print(pbr)
pbr <- getSymbols(papeis, src = "google", from = "2013-01-01", to = "2017-06-01")
pbr <- getSymbols(papeis, src = "google", from = "2013-01-01", to = "2017-06-01")
pbr <- getSymbols(papeis, src = "yahoo", from = "2013-01-01", to = "2017-06-01")
rm(list=ls())
install.packages("quantmod")
install.packages("ggplot2")
library(quantmod)
library(ggplot2)
papeis <- c('ABEV3.SA', 'AZUL4.SA', 'B3SA3.SA', 'BBAS3.SA', 'BBDC3.SA', 'BBSE3.SA')
pbr <- getSymbols(papeis, src = "yahoo", from = "2013-01-01", to = "2017-06-01")
head(pbr)
print(pbr)
rm(list=ls())
install.packages("quantmod")
install.packages("ggplot2")
library(quantmod)
library(ggplot2)
papeis <- c('ABEV3.SA', 'AZUL4.SA', 'B3SA3.SA', 'BBAS3.SA', 'BBDC3.SA', 'BBSE3.SA')
pbr <- getSymbols(papeis, src = "yahoo", from = "2013-01-01", to = "2017-06-01")
head(pbr)
print(pbr)
install.packages("GenSA")
